from __future__ import unicode_literals
import os
import sys
import urwid
import pdb
from database import database, db_index

db = database()


class PopUpDialog(urwid.WidgetWrap):
    """A dialog that appears with nothing but a close button """
    signals = ['close']
    def __init__(self):
        close_button = urwid.Button("that's pretty cool")
        urwid.connect_signal(close_button, 'click',
            lambda button:self._emit("close"))
        pile = urwid.Pile([urwid.Text(
            "^^  I'm attached to the widget that opened me. "
            "Try resizing the window!\n"), close_button])
        fill = urwid.Filler(pile)
        self.__super.__init__(urwid.AttrWrap(fill, 'popbg'))


class ThingWithAPopUp(urwid.PopUpLauncher):
    def __init__(self):
        self.__super.__init__(urwid.Button("click-me"))
        urwid.connect_signal(self.original_widget, 'click',
            lambda button: self.open_pop_up())

    def create_pop_up(self):
        pop_up = PopUpDialog()
        urwid.connect_signal(pop_up, 'close',
            lambda button: self.close_pop_up())
        return pop_up

    def get_pop_up_parameters(self):
        return {'left':0, 'top':1, 'overlay_width':32, 'overlay_height':7}


class menu_button(urwid.Button):
    def __init__(self, caption, callback=None):
        super(menu_button, self).__init__(caption)
        self.user_data = {}
        if callback:
            urwid.connect_signal(self, 'click', callback)
        self._w = urwid.AttrMap(urwid.SelectableIcon(caption, 1),
           None, focus_map='selected')


class t_menu(urwid.WidgetWrap):
    def __init__(self, caption, choices, _id=1):
        super(t_menu, self).__init__(menu_button(' + ' + caption, self.open_menu))
        self._list = []
        for i in range(len(choices)):
            choices[i].user_data['sub_menu'] = caption
            sub_index = db_index[caption] 
            index = sub_index[choices[i].get_label()]
            sub_db = db.get_setting(caption)

            choices[i].user_data['value'] = sub_db[_id-1][index]
            self._list.append(choices[i])
            self._list.append(urwid.AttrWrap(urwid.Edit(
                        '', choices[i].user_data['value']),'editbx', 'editfc'))
        
        apply_button = urwid.Button('Apply' , apply_config, user_data=self._list)
        apply_button._w = urwid.AttrMap(urwid.SelectableIcon('Apply', 1), None, focus_map='selected')

        header = urwid.AttrMap(urwid.Text(['\n', caption, '\n'], align='center'), 'focus heading')
        grid = urwid.GridFlow(self._list + [
                                urwid.Divider(), urwid.Divider(), apply_button], 35, 5, 0, 'left')
        fill = urwid.Filler(grid, 'top', top=1)
        pad = urwid.Padding(fill, left=3)
        main = urwid.Frame(pad, header=header)
        self.menu = urwid.AttrMap(main, 'none')

    def open_menu(self, button):
        top.open_box(self.menu)


class sub_menu(urwid.WidgetWrap):
    def __init__(self, caption, choices):
        super(sub_menu, self).__init__(menu_button(' + ' +  caption, self.open_menu))
        listbox = urwid.ListBox(urwid.SimpleFocusListWalker([
            urwid.AttrMap(urwid.Text(['\n', caption, '\n'], align='center'), 'focus heading'),
            urwid.Divider()] + choices + [urwid.Divider()]))
        self.menu = urwid.AttrMap(listbox, 'none')

    def open_menu(self, button):
        top.open_box(self.menu)

def menu(title, choices):
    txt = urwid.Text(['\n', title, '\n'], align='center')
    map = urwid.AttrMap(txt, 'focus heading')
    body = [map, urwid.Divider()]
    body.extend(choices)
    return urwid.ListBox(urwid.SimpleFocusListWalker(body))

def item_chosen(button):
    edit = urwid.Edit(('editcp', [button.label, ": "]), button.user_data['value'])
    response = urwid.AttrWrap(edit, 'editbx', 'editfc')

    button.user_data['edit'] = edit
    done = urwid.Button('Apply', save_config, user_data=button)
    top.open_box(urwid.Filler(urwid.Pile([response,urwid.Divider(), done])))

def apply_config(button, data):
    sub_index = data[0].user_data['sub_menu']
    sub_db_index = db_index[sub_index]
    dic = {}
    for i in range(len(data)):
        if i % 2 is 0:
            key = sub_db_index[data[i].get_label()]
        if i % 2 is 1:
            value = data[i].get_edit_text()
            dic[key] = value  
    db.set_setting(sub_index, dic)    

def save_config(button, data):
    print(button.base_widget)
    print(data)
    # db.set_setting(data['sub_menu'], data['edit'].get_edit_text())


def exit_program(button):
    raise urwid.ExitMainLoop()

menu_top = menu('Main Menu', [
#    sub_menu('Overview', [
#        menu_button('   Model name', item_chosen),
#        menu_button('   Device name', item_chosen),
#        menu_button('   System up time', item_chosen),
#        menu_button('   Firmware version', item_chosen),
#    ]),
    sub_menu('Basic Settings', [
        t_menu('Network Settings', [
            menu_button('IP address'),
            menu_button('Subnet mask'),
            menu_button('Primary DNS server'),
            menu_button('Secondary DNS server'),
        ]),
    ]),
])

class CascadingBoxes(urwid.WidgetPlaceholder):
    max_box_levels = 4

    def __init__(self, box):
        super(CascadingBoxes, self).__init__(urwid.SolidFill(' '))
        self.box_level = 0
        self.open_box(box)

    def open_box(self, box):
        self.original_widget = urwid.Overlay(urwid.LineBox(box),
            self.original_widget,
            align='center', width=('relative', 80),
            valign='middle', height=('relative', 80),
            min_width=60, min_height=8,
            left=self.box_level * 3,
            right=(self.max_box_levels - self.box_level - 1) * 3,
            top=self.box_level * 2,
            bottom=(self.max_box_levels - self.box_level - 1) * 2)
        self.box_level += 1

    def keypress(self, size, key):
        if key == 'esc' and self.box_level > 1:
            self.original_widget = self.original_widget[0]
            self.box_level -= 1
        else:
            return super(CascadingBoxes, self).keypress(size, key)


palette = [
    ('none', '', '', ''),
    ('focus heading', 'bold', 'dark blue'),
    ('line', 'black', 'dark red'),
    ('options', '', ''),
    ('reversed', 'standout', ''),
    ('selected', 'bold, black', 'light gray'),
    ('item', 'bold, white',''),
    ('editfc','white', 'dark blue', 'bold'),
    ('editbx','light gray', 'dark blue'),
    ('editcp','white','', 'standout'),
    ]

top = CascadingBoxes(menu_top)
urwid.MainLoop(top,  palette).run()
